package dev.turingcomplete.kotlinonetimepassword

import org.apache.commons.codec.binary.Base32
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.CsvFileSource
import java.util.*

class GoogleAuthenticatorTest {
  // -- Companion Object -------------------------------------------------------------------------------------------- //
  // -- Properties -------------------------------------------------------------------------------------------------- //
  // -- Initialization ---------------------------------------------------------------------------------------------- //
  // -- Exposed Methods --------------------------------------------------------------------------------------------- //

  @ParameterizedTest(name = "Timestamp: {0}, expected code: {1}")
  @DisplayName("Multiple Test Vectors")
  @CsvFileSource(resources = ["/dev/turingcomplete/kotlinonetimepassword/googleAuthenticatorTestVectors.csv"])
  fun testGeneratedCodes(timestamp: Long, expectedCode: String) {
    val googleAuthenticator = GoogleAuthenticator(Base32().decode("Leia"))
    assertEquals(expectedCode, googleAuthenticator.generate(Date(timestamp)))
    assertTrue(googleAuthenticator.isValid(expectedCode, Date(timestamp)))
  }

  @Test
  @DisplayName("16 Bytes generated string secret")
  fun testGeneratedSecretToBeExactly16Bytes() {
    val googleAuthenticatorRandomSecret = GoogleAuthenticator.createRandomSecret()
    assertEquals(16, googleAuthenticatorRandomSecret.toByteArray().size)
  }

  @Test
  @DisplayName("16 Bytes generated byte array secret")
  fun testGeneratedByteArraySecretToBeExactly16Bytes() {
    val googleAuthenticatorRandomSecret = GoogleAuthenticator.createRandomSecretAsByteArray()
    assertEquals(16, googleAuthenticatorRandomSecret.size)
  }

  @Test
  fun testOtpAuthUriBuilder() {
    val secret = Base32().encode("Foo".toByteArray())
    assertTrue(String(secret).startsWith("IZXW6"))
    val otpAuthUri = GoogleAuthenticator(secret).otpAuthUriBuilder().issuer("foo").buildToString()
    assertEquals("otpauth://totp/?algorithm=SHA1&digits=6&period=30&issuer=foo&secret=IZXW6", otpAuthUri)
  }

  // -- Private Methods --------------------------------------------------------------------------------------------- //
  // -- Inner Type -------------------------------------------------------------------------------------------------- //
}